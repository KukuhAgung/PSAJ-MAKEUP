generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String
  email        String        @unique
  password     String?
  phoneNumber  String?
  image        String?
  address      String?
  reviewQuota  Int?          @default(0)
  role         UserRole      @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authProvider AuthProvider?
  reviews      Review[]
}

model AuthProvider {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  provider       String
  providerUserId String   @unique
  email          String?
  accessToken    String?
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Review {
  id            Int         @id @default(autoincrement())
  userId        Int
  category      String
  stars         Int
  comment       String?
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
}

model Income {
  id            String   @id @default(cuid())
  date          DateTime
  category      String
  totalSales    Int
  amount        Float
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HeroSection {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSection {
  id        Int      @id @default(autoincrement())
  category  String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PortfolioSection {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DescriptionSection {
  id        Int      @id @default(autoincrement())
  videoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model HeroProduct {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemProduct {
  id          String          @id @default(cuid())
  title       String
  subtitle    String
  banner      String
  description String
  category    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  galleryItems GalleryProduct[]
}

model GalleryProduct {
  id        String      @id @default(cuid())
  image     String
  productId String
  product   ItemProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model HeroGallery {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GalleryItem {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum UserRole {
  ADMIN
  USER
}
